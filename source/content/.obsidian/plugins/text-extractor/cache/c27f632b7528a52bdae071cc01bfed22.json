{"path":"Notes/@Summer2024/Computing for Physicists/Homework 5/hw5.pdf","text":"Ground state 0.7070503009979824 First Excited State 2.1210379245636237 In [66]: import matplotlib.pyplot as plt import numpy as np from scipy import linalg L = 15 N = 500 dx = L / ( N - 1 ) # Defining Kinetic Energy Matrix H = ( np . diag ( - 2 * np . ones ( N ))) + np . diag ( np . ones ( N - 1 ), k = 1 ) + np . diag ( np . ones ( N - 1 ), k =- 1 ) H = ( - 0.5 * H ) / ( dx ** 2 ) # Defining Potential Matrix def potential ( x ): return x ** 2 xs = dx * np . arange ( N ) - L / 2 TE = H + np . diag ( potential ( xs ), k = 0 ) w , v = linalg . eigh ( TE ) plt . title ( \"First 3 states for Given potential\" ) plt . plot ( xs , v [:, 0 ], label = \"Ground Energy\" ) plt . plot ( xs , v [:, 1 ], label = \"First Excited State\" ) plt . plot ( xs , v [:, 3 ], label = \"Second Excited State\" ) ax = plt . gca () ax . set_xlim ([ - 5 , 5 ]) ax . set_ylim ([ - 0.2 , 0.2 ]) plt . legend () plt . show () print ( \"Ground state\" , w [ 0 ]) print ( \"First Excited State\" , w [ 1 ]) print ( \"Second excited state\" , w [ 2 ]) Second excited state 3.5347995641721646 Ground state 2.064705385000181 First Excited State 4.863520417744878 Second excited state 7.668552215998307 In [68]: # Defining Kinetic Energy Matrix H = ( np . diag ( - 2 * np . ones ( N ))) + np . diag ( np . ones ( N - 1 ), k = 1 ) + np . diag ( np . ones ( N - 1 ), k =- 1 ) H = ( - 0.5 * H ) / ( dx ** 2 ) # Defining Potential Matrix def potential ( x ): return x ** 2 xs = dx * np . arange ( N ) TE = H + np . diag ( potential ( xs ), k = 0 ) w , v = linalg . eigh ( TE ) ground = np . append ( np . zeros ( N ), v [:, 0 ]) first = np . append ( np . zeros ( N ), v [:, 1 ]) second = np . append ( np . zeros ( N ), v [:, 2 ]) xs = dx * np . arange ( N * 2 ) - L plt . title ( \"First 3 states for Given potential\" ) plt . plot ( xs , ground , label = \"Ground Energy\" ) plt . plot ( xs , first , label = \"First Excited State\" ) plt . plot ( xs , second , label = \"Second Excited State\" ) ax = plt . gca () ax . set_xlim ([ - 5 , 5 ]) ax . set_ylim ([ - 0.2 , 0.2 ]) plt . legend () plt . show () print ( \"Ground state\" , w [ 0 ]) print ( \"First Excited State\" , w [ 1 ]) print ( \"Second excited state\" , w [ 2 ]) In [ ]:","libVersion":"0.5.0","langs":""}