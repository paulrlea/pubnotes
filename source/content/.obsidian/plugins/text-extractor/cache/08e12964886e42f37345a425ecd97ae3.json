{"path":"Notes/Physics/Computing for Physicists/In Class 2/CFP_lec2_2024.pdf","text":"Lecture 2: Python I/O at the command line ◦Continue working at the command line (environment) ◦Scripts and Command line arguments ◦Basic I/O in python scripts Environmental variablesenv envshows a list of all currently defined environmental variables and what they are set to. Changing them (with exportor setenv) willy- nilly will most certainly break things. Many processes look at env to determine behavior. To see the value of a particular variable you can just echo it, e.g: echo$PATH ($PATH) What happens when you type ls? Almost all shell commands are just individual programs. When you type “ls” it looks through each dir in the $PATH variable until it finds an executable file named ls /c/Users/damien/bin /mingw64/bin /usr/local/bin /usr/bin /bin … .bashrc file Whenever a bash shell is initiated it executes the .bashrc script (if it exists in your home directory). This script is commonly used to change environmental variables or define aliases. aliases are defined keyboard shortcuts for commands This is commonly used as a way to alter your environmental variables or issue commands associated with your environment. winpty is used to fix some compatibility issues between bash and windows. use nano to create a .bashrc file in your home directory nano .bashrc starting a new bash shell should automatically define these new aliases. Adding to your path If you cannot execute a command at the command line, it is probably not in your path. Important! This is your current PATH variable. Without this none of your other commands will work. directory to add to your path. exportPATH=$PATH:newdir (to add newdir to your PATH) new PATH variable to get chrome working at the command line you could add the following line to your .bashrc script Writing a scriptWriting a script Create a Hello World! Bash script using nano Tells the shell which interpreter to use when running the script can be run with ./hello.sh sh hello.sh or bash hello.sh In linux, the file must be “executable” for you to run it directly (./hello.sh) running a script with bash –xscript.sh is useful for debugging. permissions ls –l (-l tells ls to give more details, including showing the permissions) permissions: r ~ read permission w ~ write permission x ~ execute permission user permissions group member permissions other people to add execute permissions to newfile: chmoda+xnewfile.sh (for all) chmodu+xnewfile.sh (for user) chmodg+x newfile.sh (for group members) chmodo+x newfile.sh (for others) can remove permissions with chmoda-x newfile.sh Command line arguments Command line arguments can be referred to in your script with $0, $1, $2, etc. $0 = name of script $1 = 1stcommand line argument $2 = 2ndcommand line argument, etc. command line args can be used to specify behavior/input files/output files. (e.g., -l is a command line arg for ls ) can loop over command line args with for i in $@;do something;done A little more useful What does running this script do?? ./comm nums For context, here are the other files in directory Writing a python script can be executed with python hello.py To make it act as standalone executable, we can put in the interpreter line. Since it is in my path, I can execute it just like a command: Command Line arguments sys.argv[0] (name of file being executed) sys.argv[1] (1stcommand line argument) sys.argv[2] (2ndcommand line argument), etc. output Making a simple python plotting program numPy loadtxt and savetxt: #returns numPy array #vals[:,0] is 1stcolumn of data #vals[:,1] is 2ndcolumn of data for fast reading/writing of simply formatted files (each line has same # of values) Activity 2: make standalone python script with command line arguments 2) Write a standalone python script which can read-in a data file (inputfname) containing columns of comma separated values. It should add two selected columns (num1and num2) together and write the sum as a single column to a selected output file (outputfname). The script should take 4 command line arguments: Usage: ./script.py inputfname outputfname num1 num2 (note: elements of sys.argv are strings, num1 and num2 will need to be cast as integers). 1) get the data file named “data.csv” located at 74.69.18.77 username: class password: phys2962 (hint: the findcommand is very useful, https://www.linode.com/docs/tools-reference/tools/find-files-in-linux-using-the-command-line/) 3) Run the script on columns 1 and 3 of data.csv (./script.py data.csv outfile 1 3). ** note vals[:,0] is 1stcolumn, vals[:,1] is 2ndcolumn, etc. 4) Upload your script and the resulting outfileto the LMS. Note: Probably the fastest way to do this in real life would be at the command line with sed ‘s/,/ /g’ data.cvs|gawk ‘{print $1+$3}’>outfile","libVersion":"0.5.0","langs":""}