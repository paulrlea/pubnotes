{"path":"Notes/Physics/Computing for Physicists/Test 3/Exam3.pdf","text":"In[]:= deqn = LaplacianV[x, y], {x, y} ⩵ Piecewise- 1, x ^ 2 + y ^ 2 < 1 / 2, 0; region = Disk[]; boundary = DirichletConditionV[x, y] ⩵ 0, x ^ 2 + y ^ 2 ⩵ 1; solution = NDSolveValuedeqn, boundary, V, {x, y} ∈ region; ContourPlotsolution[x, y], x, y ∈ region, PlotRange → All Plot3Dsolution[x, y], x, y ∈ region, PlotRange → All Out[]= -1.0 -0.5 0.0 0.5 1.0 -1.0 -0.5 0.0 0.5 1.0 Out[]= In[]:= matrix = {{1, 0, 4, 1}, {7, 4, 1, 0}, {0, 0, 2, 5}, {9, 1, 0, 3}}; matrix // MatrixForm {val, vec} = Eigensystemmatrix Out[]//MatrixForm= 1 0 4 1 7 4 1 0 0 0 2 5 9 1 0 3 Out[]=  8.66… , -0.910… + 4.39… ⅈ , -0.910… - 4.39… ⅈ , 3.16… ,  0.523… , 0.948… , 0.751… , 1,  -0.515… + 0.473… ⅈ , 0.722… + 0.132… ⅈ , -0.524… - 0.791… ⅈ , 1,  -0.515… - 0.473… ⅈ , 0.722… - 0.132… ⅈ , -0.524… + 0.791… ⅈ , 1,  8.41… , -75.5… , 4.30… , 1 In[]:= Nmatrix .vec〚1〛 ⩵ N[(val〚1〛 * vec〚1〛)] Out[]= True In[]:= bvec = {4, 1, 0, 2}; LinearSolvematrix, bvec Out[]=  242 551 , - 422 551 , 545 551 , - 218 551  2 Exam2.nb In[]:= r[θ _] = Abs[Tan[θ]]; r1[θ _] = 2  Cos[θ] ^ 2 + 5 Sin[θ]; PolarPlot{r[θ], r1[θ]}, θ, 0, 2 Pi Out[]= -3 -2 -1 1 2 3 -5 5 In[]:= solution1 = FindRootr[θ] ⩵ r1[θ], {θ, 0.5}; solution2 = FindRootr[θ] ⩵ r1[θ], {θ, 3}; sol1 = θ /. solution1 sol2 = θ /. solution2 rval1 = r[θ] /. solution1; rval2 = r[θ] /. solution2; polarIntersects = {{sol1, rval1}, {sol2, rval2}} Out[]= 0.542759 Out[]= 2.59883 Out[]= {{0.542759, 0.603186}, {2.59883, 0.603186}} In[]:= cartesianIntersects = CoordinateTransform\"Polar\" → \"Cartesian\", polarIntersects Out[]= {{0.446979, 0.30789}, {2.14022, 1.47424}} Exam2.nb 3 In[6]:= fr _, θ _, ϕ_ = Sin[θ] E ^ (- r ^ 2) / (1 + r); Integratef[r, θ, ϕ ] r ^ 2 Sin[θ], r, 0, Infinity, θ, 0, Pi, ϕ, 0, 2 Pi Out[7]= π2 ⅇ - ⅇ π + π Erfi[1] - ExpIntegralEi[1] 2 ⅇ In[8]:= N[%] Out[8]= 2.16052 In[17]:= field = Gradf[r, θ, ϕ ], {r, θ, φ }, \"Spherical\" Out[17]= - ⅇ-r 2 Sin[θ] (1 + r)2 - 2 ⅇ-r 2 r Sin[θ] 1 + r , ⅇ-r 2 Cos[θ] r (1 + r) , 0 Out[1]= - ⅇ-r 2 Sin[θ] (1 + r)2 - 2 ⅇ-r 2 r Sin[θ] 1 + r , ⅇ-r 2 Cos[θ] 1 + r , 0 4 Exam2.nb In[41]:= cfunc = TransformedField\"Spherical\" → \"Cartesian\", f[r, θ, ϕ ], {r, θ, φ } → {x, y, z} cfield = Grad[cfunc, {x, y, z}] VectorPlot3Dcfield, {x, 0, 1}, {y, 0, 1}, {z, 0, 1} Out[41]= ⅇ-x 2-y 2-z 2 x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  Out[42]= - ⅇ-x 2-y 2-z 2 x x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  2 - ⅇ-x 2-y 2-z 2 x x2 + y2 x2 + y2 + z2 3/2 1 + x2 + y2 + z2  + ⅇ-x 2-y 2-z 2 x x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  - 2 ⅇ-x 2-y 2-z 2 x x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  , - ⅇ-x 2-y 2-z 2 y x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  2 - ⅇ-x 2-y 2-z 2 y x2 + y2 x2 + y2 + z2 3/2 1 + x2 + y2 + z2  + ⅇ-x 2-y 2-z 2 y x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  - 2 ⅇ-x 2-y 2-z 2 y x2 + y2 x2 + y2 + z2 1 + x2 + y2 + z2  , - ⅇ-x 2-y 2-z 2 x2 + y2 z x2 + y2 + z2 1 + x2 + y2 + z2  2 - ⅇ-x 2-y 2-z 2 x2 + y2 z x2 + y2 + z2 3/2 1 + x2 + y2 + z2  - 2 ⅇ-x 2-y 2-z 2 x2 + y2 z x2 + y2 + z2 1 + x2 + y2 + z2   Out[43]= Exam2.nb 5 In[196]:= v[x _] = Piecewise{0, - 4 < x < - 1}, 10 ^ 100, x > 4 && x < - 4, 2, - 1 ≤ x < 1, 0, 1 ≤ x < 4 boundary = DirichletConditionψ[x] ⩵ 0, x ⩵ 4 && x ⩵ - 4; {eval, evec} = NDEigensystem- (1 / 4) Laplacian[ψ[x], {x}] + v[x] * ψ[x] , ψ[x], {x, - 4, 4}, 6 evec = evec + eval; ShowPlot{evec, eval}, {x, - 10, 10}, PlotRange → Full, Plotv[x], {x, - 10, 10}, Filling → Bottom Out[196]= 0 - 4 < x < - 1 10 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000  000 000 000 000 000 000 000 000 000 000 000 000 000 x > 4 && x < - 4 2 - 1 ≤ x < 1 0 True Out[198]= {0.0518675, 0.0576191, 0.463369, 0.514127, 1.25977, 1.39244}, InterpolatingFunction Domain: {{-4., 4.}} Output: scalar [x], InterpolatingFunction Domain: {{-4., 4.}} Output: scalar [x], InterpolatingFunction Domain: {{-4., 4.}} Output: scalar [x], InterpolatingFunction Domain: {{-4., 4.}} Output: scalar [x], InterpolatingFunction Domain: {{-4., 4.}} Output: scalar [x], InterpolatingFunction Domain: {{-4., 4.}} Output: scalar [x] 6 Exam2.nb Out[200]= -10 -5 5 10 -0.5 0.5 1.0 1.5 2.0 Exam2.nb 7","libVersion":"0.5.0","langs":""}