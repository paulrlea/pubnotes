{"path":"Notes/@Summer2024/Computing for Physicists/In class 1/CFP_lec1_slides_2024.pdf","text":"Linux command line (the shell) Terminal in Linux or OS/X ◦For windows download Ubuntu (alternate bash shells) ◦MobaXterm (https://mobaxterm.mobatek.net) ◦Gitbash (https://git-scm.com/download/win) if you don’t have bash, install it now. different shells ◦the shell is a programing language ◦it has variables and states ◦uses obtuse syntax including special characters Warning. The following lecture is superdry. It contains a bunch of information that you will not remember. very basic shell commands (pwd, ls, and cd) when opening a terminal you start in your “home directory” mine is /c/Users/damien, the shortcut is the tilde, ~ ◦(print working directory) : use pwdcommand to determine current directory. ◦(listing): use lsto show contents of current directory. ◦(change directory): use cdto change the current directory. to see output which has scrolled off- screen can typically use shift+pg up(down) to look through output buffer. tab completion is nice! * is a wildcard. $ lsUn* (would show any file/directory which begins with Un) directory structure and shortcuts Absolute path: /home/damien/mysrc/file1.py Relative path: (if current dir is /home/damien) ./mysrc/file1.py or ../damien/mysrc/file1.py / /etc/usr /bin/lib/home /home/damien/home/bob/home/alice … root directory /home/damien/mysrc/home/damien/dirwithlongname /home/damien/mysrc/file1.py/home/damien/mysrc/file2.py … / The root, or top-level, directory of the filesystem (also used for separating the names of directories in paths) ~ The home directory . Current working directory .. Parent of current working directory ../.. The parent of the parent of current directory Syntax Meaning continued ◦mkdirdirectoryname(makes a new directory in the current directory) ◦cp filetocopy newfile(makes a copy of “filetocopy” and names it “newfile”) ◦mvsourcefile newfile(moves sourcefile to newfile, can be a used to rename file or put in a different directory) ◦mancommand(brings up manual on how to use command) ◦aproposkeyword(equivalent to man –k, searches the manual for commands whose descriptions contain the keyword/s) e.g. $ apropos “text editor” ◦less filename(displays text of filename to screen one page at a time, can use pg-up/down, search for expression with /expr, q to quit) ◦echo“type something” (displays what you type to the screen) ◦> (redirectsthe output which would go the screen and sends it somewhere else, e.g. a file or a device.) $echo “hello world!” >hworld.txt (creates new file, “hworld.txt” which contains the text “hello world!”.) command --help (usually shows usage and command line arguments) pwd ls cd mkdir cp mv man less echo > note I’m just giving the simplest use cases. $mancp (or $cp--help) other common use cases cp –ipfiletocopy newfile(no auto-overwrite) cpfile1 file2 file3 directory (copy the three files to directory) cpf* directory (copy all files that start with “f” to directory) cp -r sourcedir newdir(copy entire source_dir to new_dir) [] indicate something optional, … can be more than one other useful commands ◦nano, vim, emacs (terminal based text editors, nano is by far the simplest) ◦cat(displays entire file to screen) ◦>(redirect the output) $ catfile1.py file2.py > file3.py ◦grep expression filename (outputs to screen lines from filename which contain expression) ◦command1 |command2 (the pipe. output of command1 is redirected to the input of command 2, extremely useful.) can be used on multiple files, e.g. $ catfile1.py file2.py displays them one after another. >> will append the output to the end of a file instead of overwriting it. ◦chmodcodefilename (changes permissions on file, who can read/write/execute.) e.g, chmod+x filename (make file executable) chmod–w filename (remove write permissions) You can make a bash script by simply by making a text file containing bash commands executable (chmod+x). They will be executed as if typed in terminal. Bash even supports basic loops, e.g. for i in {1..100};do echo$i;done (displays 1 to 100 to screen) for i in {1..10};do cpfile_temp file$i;done(makes 10 copies of file_temp named: file1, file2, file3,…,and file10) for var in `cat test.txt`;doecho $var;done (displays each space delimited string in file test.txt to screen, each on its own line) In the above examples both i and var are variables, they are dereferenced by using $. Variables can be created at anytime at the command line (e,g, myvar=5 or hrm=“hello”). The shell is a full-fledged programming language, with arrays, conditionals, and loops For loop in bash Windows powershell ◦echo, >, |, mkdir, rm, mv, ls, pwd, cd, more (common linux command similar to less) all work in the same way as in bash shell. ◦grep is missing (but sls has similar functionality) ◦There are also alternatives to sed and (g)awk. combining |with sed ◦seds/(stream editor, can perform text transformations on file or input from pipe. It is quite powerful, but steep learning curve) matches every single-digit number replace every occurrence on each line sed s/,//g file simple search and replace: sed‘s/texttoreplace/replacement/g’ replace a regular expression (regex): sed‘s/[0-9]/replacement/g’ http://www.grymoire.com/Unix/Sed.html some regex examples: a.c (will match any 3 chars that starts with a and ends with b, abc, aac, etc) ab{2,4} ( will match abb, abbb, and abbbb) ab* (matches a,ab,abb,abbb,…) note: sed is greedy. will match largest it can. regular expressions These are only some of the basic special chars associated with regex. They can get quite complicated pretty quickly. https://regexone.com/ interactive tutorial for regex https://regexone.com(interactive tutorial on regular expressions) https://regexlearn.com/learn/regex101(another tutorial) A fairly common example I have a big output file which is not in any conventional format and I want to generate a plot of the value of “E0”. Things like this can be done very quickly by stringing together greps and sed or gawk. $grepE0 OUT $ grepE0 OUT | seds/.*E0=//|sed s/d.*// .* is a wildcard for sed which will match anything But gawk is the better tool here. $ grepE0 OUT | gawk‘{print $5}’ value is in 5thcolumn We can us sed can also output multiple columns and perform some basic math on them. e.g, $ grepE0 OUT | gawk‘{print $1” “$3-$5}’ connecting to other computers (ssh and scp) Open a terminal on a Remote Computer (secure shell): use ssh username@remotehostnameto connect to a remote host. After password authentication you should have a remote shell. Copy a file from a Remote Computer to your own computer (secure copy): scp [optional arguments] source_file destination_file ◦if one of the files is remote, it should be specified as username@remotehostname:/path/to/file for example, scpdamien@komodo.phys.rpi.edu:~/myfile.txt coolfile.txt copies file “myfile.txt” from my home directory at komodo.phys.rpi.edu to my current working directory on my local computer and gives it the name “coolfile.txt”. remote computer nameusername on remote computer full path to file on remote computer name you want to give copied file on your computer gnuplot http://gnuplot.sourceforge.net/demo/ gnuplot has its own scripting language for producing high quality plots. widely used in physics. we will just only touch on it here. quick plot in gnuplot help exit plot replot set unset Things you can set setxrange [-pi:pi] setyrange [-2:2.5] setgridlines setxtics <start>,<incr>,<end> setterminal … lots more can plot a function or data from file. plot a function: gnuplot> plotsin(x) plot data: gnuplot> plot“data.txt” (default is ugly) gnuplot> plot“data.txt” pointtype 7 (better) gnuplot> plot“data.txt” with lines use replotto plot more than one thing, or after you have changed a setting. gnuplot> test terminal different terminal types have formatted output. set term pdf replot will display pdf code to screen. To output to file: set term pdf set output “out.pdf” replot","libVersion":"0.5.0","langs":""}