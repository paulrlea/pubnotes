{"path":"Notes/@Summer2024/Computing for Physicists/In Class 3/CFP_lec3_2024.pdf","text":"Lecture 3: Getting started with Python ◦Jupyter notebook ◦Numpy Arrays and slicing ◦Intro to Matplotlib Jupyter notebook An improvement on interactive shell (ipython) environment Allow you to create documents which contain live code, equations, and visualizations. ◦Markdown allows you to include latex equations, html, etc. Has support for many different languages (name is from Julia, Python, R) choose to inset code or text Example Notebook Markdown Cells with code After Markdown is executed it is formatted correctly. Individual cells can be executed with Shift-Enter. Command mode (Esc) vs. Edit mode ◦In command mode, pressing chars issues commands a (insert cell above) b (inset cell below) m (change cell to markdown) y (change cell to code) … many more in help keyboard shortcuts (in the help)Including Latex in the markdown Commonly used tex codes ^ superscript _ subscript {} used to group special chars or symbols preceded with \\ greek letters: \\alpha, \\beta, \\gamma, etc. \\frac{}{} for fraction \\sqrt{} for square root \\sum{} for summation \\int{} for integral Warm up Write a quick program in jupyter notebook to perform the following summation with a for loop, Note: to get the timings you can import time begintime=time.time() …your code finaltime=time.time() print(“Total time “,finaltime-initialtime) Important libraries NumPy: ◦Creation and manipulation of numeric arrays/matrices. Lots of useful functions: mathematical functions exp/sin/etc, operations on array (sums, products), global properties (max/min, statistics), linear algebra (overlaps with SciPy but is lighter), … lots more Matplotlib: ◦2D/3D plotting, interactive plots, SciPy: ◦special functions, optimization, interpolation, Fourier transform, linear algebra (matrix inversion, eigenvalues, etc), integration (ODEs) can be installed into existing python installation with pip. All standard for computationally focused python distributions like anaconda. NumPy arrays A Python list is not the same as an array. Numpy arrays consist of fixed lengthdata which is all the same type, allowing for efficient calculations on the entire array. Creating NumPy arrays: np.array, np.zeros, np.ones, np.arange, np.linspace, np.logspace Making arrays of evenly spaced numbers np.arange(0,1,.2) np.linspace(0,1,11) increment by beginning of range (note: array does not include end value) first valuefinal value # of points in array np.array([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0]) np.array([0,.2,.4,.6,.8]) arange linspace end of range Defaults to integer datatype if no increment (or int increment) is used Basic Numpy functionality lots more, see https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.math.html vectorization simple user defined functions are “vectorized” by default. Functions which contain loops or boolean logic are not vectorized by default, but can be through np.vectorize. or alternately, can pass array to function and it will efficiently calculate the function for each value in the array. NumPy arrays objects useful methods: sort size std sum mean argmax argmin resize cumsum reshape attributes: shape size T (transpose) real imag Data is not copied in assignment unless a ndarray is returned from a method. slicing a[ : : ] initial index final Index (not inclusive) count-by index a[0:10:2]array([0, 2, 4, 6, 8]) a[7:23:3] array([ 7, 10, 13, 16, 19, 22]) a[3:13]array([ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) If only one colon, it is assumed count-by index equals 1 a[59:] array([59, 60, 61, 62, 63]) a[:6] array([0, 1, 2, 3, 4, 5]) If no index after colon, it slices to final element in the array If no index before colon, it is assumed to be 0, the first index in the array. code returns note, returned array has elements up to final index-1. a[3:4] = a[3] Higher dimensional arrays The shapeof any array can be changed as long as new shape has same number of elements as old. Alternately you can use the a.reshape(n,m)method to return a reshaped ndarray. 2D arrays default indexing is a[row, column], (known as “row major”). e.g., a[ 1, 2 ] is 10 a[4,7] is 39 slicing is same as 1D, but with two sets of indices a[ : : , : : ] row 0 row 1 row 2 . . . col 0 col 1 col 2 … How to display values in red box? 2D arrays default indexing is a[row, column], (known as “row major”). e.g., a[ 1, 2 ] is 10 a[4,7] is 39 slicing is same as 1D, but with two sets of indices a[ : : , : : ] row 0 row 1 row 2 . . . col 0 col 1 col 2 … red box corresponds to a[2:7,3:5] Simple 2D plot with matplotlibx and y labels Tex code can be used within the axeslabels. Activity 3 1) Plot of the function over the x-range of to Your x-axis should be labeled as and your y-axis should be labeled as 2) Use LaTeX markup to display the integral 3) Numerically perform the integration in (2) using np.trapz or your own code to add up the areas of small rectangles under the curve. The following activity should be done in Jupyter notebook. When finished, export (or print) the notebook to a pdf to upload to LMS.","libVersion":"0.5.0","langs":""}