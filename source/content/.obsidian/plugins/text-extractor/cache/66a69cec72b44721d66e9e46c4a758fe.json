{"path":"Notes/Physics/Computing for Physicists/In Class 7/CFP_lec7_2024(1).pdf","text":"PHYS 2962 – Computing for Physicists Lecture 7 ORDINARY DIFFERENTIAL EQUATION Contents for today  Introduction to ordinary differential equation  Euler’s method – first-order method  Python ODE routines  Excercise Ordinary Differential Equations An equation which relates some unknown function x(t) and it’s derivatives The highest order derivative (n) which appears in the differential equation determines the order of the differential equation (nth-order ODE). Examples: (Newton’s 2ndlaw, second order ODE) (Radioactive decay, first order ODE) Derivative is the slope of the line which is tangent at the point . (analytically, ) Numeric derivative Only exact in the limit where . For any finiteh, there is some error which depends on the function and the value of h. In practice you use a very small value of h, but not too small! (Newton’s definition: forward difference method) Value of derivative from FD method, for h ranging between 10-20 to 10-1 Very small values ( ) lead to a calculated derivative of 0. This is because numbers are stored with only finite precision on a computer and and are rounded to exactly the same number (round-off error) For forward difference, the optimal value for . More accurate methods There are lots of methods to calculate the derivative! ◦Forward difference is the worst method (should never be used in practice) FD method CD method Simplest improvement is the central difference method (CD): FD vs CD Euler method for solving ODE (first order ODE) We can use the FD method to rewrite our ODE. If we know , we can determine . Then, if we know , we can determine , etc. Provided we have an initial value, we can determine . often written as recurrence relation: Example Radioactive decay: Initial condition: … Lets choose (time step) Euler:  h=1 Reducing step size increases accuracy of integration routine. Odeint for first-order ODES For 1storder ODEs. The only variables in the equation can be (y,y’,t). Need to make a python function which accepts (y,t) and returns dy/dt This is a 1storder ODE dealing with . We want to know the unknown function . Need to construct a python function which accepts and returns our ODE does not explicitly depend on t. That’s fine, if we are given (N,t) we known what is. once our ODE is defined, it can be solved easily: odeint returns array of solved values of function for given array of times. need to provide initial value. We can reduce an nthorder ODE to n 1storder ODEs Converting an order-nODE to nfirst-order ODE’s Newton’s second law: second-order ODE How to convert to two coupled 1storder ODEs? Most ODE solvers require the ODE to be defined in terms of a set of 1storder ODEs Converting an order-nODE to nfirst-order ODE’s Newton’s second law: second-order ODE 2ndorder ODE  two coupled 1storder ODEs Most ODE solvers require the ODE to be defined in terms of a set of 1storder ODEs Mass on a spring M (second order ODE) 1ststep: reduce it to two 1storder ODEs (nice to arrange things so derivatives are isolated on the left. Easier to convert to code) Odeint can handle sets of 1storder equations. In this case y is an array of the functions to be solved for in the problem, i.e. To define our set of ODEs: we need to define a function which accepts variables {[x,v],t} and returns [ 𝒅𝒙 𝒅𝒕 𝒅𝒗 𝒅𝒕 ]. returns both unknown functions x(t) and v(t) to sol. Euler vs. odeint Euler ODEINT","libVersion":"0.5.0","langs":""}