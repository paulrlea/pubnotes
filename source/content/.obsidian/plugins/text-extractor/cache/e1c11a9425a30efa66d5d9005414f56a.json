{"path":"Notes/Physics/Quantum Physics/Persans/HW/Paul Lea Homework 21.pdf","text":"Homework Problem 21 - 1D wavefunction expansions Problem 21 - 20 pts ( 5 pts per part) In [1]: The spatial part of a wavefunction for a particle in a square well with inﬁnite walls is for and it is zero elsewhere. It can be written as the sum of the eigenfunctions of the particle in a box problem: . for n=even.and for n=odd where . Ψ(𝑥) = (𝑎/2 − |𝑥|)12/𝑎2⎯ ⎯⎯⎯⎯⎯⎯⎯⎯ √ 𝑎/2 < 𝑥 < 𝑎/2 Ψ(𝑥, 𝑡) = + +. . .𝑐1𝜓1 𝑐2𝜓2 = 𝑠𝑖𝑛( 𝑥)𝜓𝑛 (2/𝑎) ⎯ ⎯⎯⎯⎯⎯⎯⎯ √ 𝑘𝑛 = 𝑐𝑜𝑠( 𝑥)𝜓𝑛 (2/𝑎) ⎯ ⎯⎯⎯⎯⎯⎯⎯ √ 𝑘𝑛 = 𝑛𝜋/𝑎𝑘𝑛 A) Plot the wavefunction and the eigenfunctions and . Make an argument for why some of the c's are zero, and specify which ones are zero. Ψ(𝑥) 𝜓1 𝜓2 # Load the standard set of libraries for basic numerical computing. import numpy as np %matplotlib inline # I chose inline because it is more straightforward to print a PDF of the file. import matplotlib import matplotlib.pyplot as plt # Don't forget that it is ok to grab code for plotting and integration from previous # (the tutorial is useful). # Useful commands include numpy.sum(f*dx) and numpy.absolute(x). To square use x**2. # Good Python/Numpy reference: PHYS2210Spring2024_HomeworkProblem21_1DWavefunct... http://localhost:8888/notebooks/Documents/School%20Vaul... 1 of 6 2/8/24, 17:02 In [22]: The Coeﬃcents for the odd eigenfunctions will be 0 because the wavefunction is an even function. B) Calculate the coeﬃcients for and by numerical integration of the product of𝑐1 𝑐2 def wavefunction(x, a): return np.sqrt(12 / a**2) * (a / 2 - np.abs(x)) def eigenfunction1(x, a): return np.sqrt(2 / a) * np.sin((np.pi * x / a)) def eigenfunction2(x, a): return np.sqrt(2 / a) * np.cos((2 * np.pi * x / a)) a = 1 x_values = np.linspace(-a / 2, a / 2, 400) y_wavefunction = wavefunction(x_values, a) y_eigenfunction1 = eigenfunction1(x_values, a) y_eigenfunction2 = eigenfunction2(x_values, a) plt.plot(x_values, y_wavefunction, label='Wavefunction') plt.plot(x_values, y_eigenfunction1, label=r'$\\psi_1(x)$') plt.plot(x_values, y_eigenfunction2, label=r'$\\psi_2(x)$') plt.xlabel('x') plt.ylabel(r'$\\Psi(x)$') plt.title('Wavefunction and Eigenfunctions') plt.grid(True) plt.legend() plt.show() PHYS2210Spring2024_HomeworkProblem21_1DWavefunct... http://localhost:8888/notebooks/Documents/School%20Vaul... 2 of 6 2/8/24, 17:02 wavefunctions. Use a small step-size (e.g.- 0.001 a). Are the coeﬃcients you calculated reasonably consistent with your expectations from your argument above? In [45]: These are close to what I expected. c1, the odd eigenfunction coeﬃcent, is close to 0, and c2, the ﬁrst even eigenfunction coeﬃcent is not 0. C) Calculate the coeﬃcients for the ﬁrst three non-zero coeﬃcients by numerically integrating the product of wavefunctions. Approximate value of c1: -9.264231390490249e-17 Approximate value of c2: 0.49637040028041307 def integrand(x, a, is_sin=True): if is_sin: return np.sqrt(12 / a**2) * (a / 2 - np.abs(x)) * np.sqrt else: return np.sqrt(12 / a**2) * (a / 2 - np.abs(x)) * np.sqrt def trapezoidal_rule(func, a, n, is_sin=True): # Calculate the width of each subinterval h = a / n # Initialize the integral value integral = 0.5 * (func(-a / 2, a, is_sin) + func(a / 2, a, # Sum the function values at the endpoints of each subinterval for i in range(1, n): integral += func(-a / 2 + i * h, a, is_sin) # Multiply by the width of each subinterval integral *= h return integral def solve_integral(a, n): # Use the trapezoidal rule to compute the integrals for both sin and cosine term integral_sin = trapezoidal_rule(integrand, a, n, is_sin=True integral_cos = trapezoidal_rule(integrand, a, n, is_sin=False return integral_sin, integral_cos a = 1 # Value of well width n = 100000 # Number of intervals for the trapezoidal rule result_sin, result_cos = solve_integral(a, n) print(\"Approximate value of c1:\", result_sin) print(\"Approximate value of c2:\", result_cos) PHYS2210Spring2024_HomeworkProblem21_1DWavefunct... http://localhost:8888/notebooks/Documents/School%20Vaul... 3 of 6 2/8/24, 17:02 In [57]: D) Plot the sum of the ﬁrst three non-zero terms times their eigenfunctions. Approximate value of the coefficent for n=2: 0.99274080023261 82 Approximate value of the coefficent for n=4: 0.49637040010422 12 Approximate value of the coefficent for n=6: 0.11030453334485 336 def integrand(x, a, n): return np.sqrt(12 / a**2) * (a / 2 - np.abs(x)) * np.sqrt(2 def simpsons_rule(func, a, n): # Define the number of intervals for Simpson's rule num_intervals = 1000 # You can adjust this value as needed for accuracy # Calculate the width of each subinterval h = a / num_intervals # Initialize the integral value integral = func(-a / 2, a, n) + func(a / 2, a, n) # Sum the function values at the endpoints of each subinterval for i in range(1, num_intervals): x = -a / 2 + i * h if i % 2 == 0: integral += 2 * func(x, a, n) else: integral += 4 * func(x, a, n) # Multiply by the width of each subinterval and divide by 3 integral *= h / 3 return integral def solve_integral(a, n): # Use Simpson's rule to compute the integral integral = simpsons_rule(integrand, a, n) return integral # Example usage: a = 1 # Value of parameter 'a' for n in [1, 2, 3]: result = solve_integral(a, n) print(f\"Approximate value of the coefficent for n={n*2}: {result PHYS2210Spring2024_HomeworkProblem21_1DWavefunct... http://localhost:8888/notebooks/Documents/School%20Vaul... 4 of 6 2/8/24, 17:02 In [59]: Out[59]: <matplotlib.legend.Legend at 0x7f6f22689d60> def combined_function(x, a, coefficients): combined_values = np.zeros_like(x) for n, coefficient in enumerate(coefficients, start=1): combined_values += coefficient * np.sqrt(2 / a) * np.cos return combined_values # Define parameters a = 1 # Value of parameter 'a' coefficients = [0.9927408002342233, 0.4963704001171262, 0.11030453335935995 # Generate x values x_values = np.linspace(-a / 2, a / 2, 400) # Calculate the combined function values combined_values = combined_function(x_values, a, coefficients) # Plot the combined function plt.plot(x_values, combined_values, label='Sum of functions') # Add labels and title plt.xlabel('x') plt.ylabel('Function Value') plt.title('Plot of the Sum of the Functions for n=1,2,3') # Add grid plt.grid(True) # Add legend plt.legend() # Show PHYS2210Spring2024_HomeworkProblem21_1DWavefunct... http://localhost:8888/notebooks/Documents/School%20Vaul... 5 of 6 2/8/24, 17:02 Print this notebook as a PDF and submit it in Gradescope as Problem 21. In [ ]: In [ ]: In [ ]: PHYS2210Spring2024_HomeworkProblem21_1DWavefunct... http://localhost:8888/notebooks/Documents/School%20Vaul... 6 of 6 2/8/24, 17:02","libVersion":"0.5.0","langs":""}